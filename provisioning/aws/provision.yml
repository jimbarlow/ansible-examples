---
- name: Setup
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  tasks:
    - name: Check for required variables
      fail:
        msg: "Required variable not defined: {{ var_name }}"
      when: item not in vars
      with_items:
        - aws_region
        - vpc_name

    - set_fact:
        demo_tags:
          Name: ansible-demo-{{ tower_user_name }}
          AnsibleDemo: True
          DemoUser: "{{ tower_user_name }}"

    - name: Gather facts about the target VPC
      ec2_vpc_net_facts:
        aws_region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ vpc_name }}"
      register: vpc_facts

    - set_fact:
        vpc_id: "{{ vpc_facts.vpcs[0].id }}"

    - name: Create an inventory for provisioning purposes
      add_host:
        name: instance-profile-{{ item.0 }}
        aws_region: "{{ aws_region }}"
        platform: "{{ item.1.platform | default(None) }}"
        virtualization_type: "{{ item.1.virtualization_type | default(None) }}"
        vpc_id: "{{ vpc_id }}"
        subnet_name: "{{ item.1.subnet_name }}"
        keypair_name: "{{ item.1.keypair_name }}"
        user_data: "{{ item.1.user_data | default(None) }}"
        tags: "{{ item.1.tags | combine(demo_tags) }}"
        ami_name: "{{ item.1.ami_name | default(None) }}"
        ami_id: "{{ item.1.ami_id | default(None) }}"
        type: "{{ item.1.instance_type | default(instance_type) | default('t2.micro') }}"
        count: "{{ item.1.count | default(1) }}"
        wait_port: "{{ item.1.wait_port | default(None)}}"
      with_indexed_items: "{{ aws_instances | default([]) }}"

- name: Provision EC2 instance
  hosts: instance-profile-*
  gather_facts: no
  connection: local
  tasks:
    - name: Find latest version of the specified AMI if given by name
      ec2_ami_find:
        region: "{{ aws_region }}"
        platform: "{{ platform }}"
        virtualization_type: "{{ virtualization_type }}"
        owner: amazon
        name: "{{ ami_name }}"
        no_result_action: fail
        sort: name
        sort_order: descending
      register: found_amis
      when:
        - ami_name
        - not ami_id

    - name: Set AMI ID
      set_fact:
        ami_id: "{{ (found_amis.results | first).ami_id }}"
      when:
        - ami_name
        - not ami_id

    - name: Gather facts about the target subnet
      ec2_vpc_subnet_facts:
        aws_region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
          "tag:Name": "{{ subnet_name }}"
      register: target_subnet_facts

    - set_fact:
        subnet_id: "{{ target_subnet_facts.subnets[0].id }}"

    - name: Ensure the demo security group is configured correctly
      ec2_group:
        aws_region: "{{ aws_region }}"
        name: ansible-demo
        description: SSH and common web app ports for Ansible demos.
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5986
            to_port: 5986
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        state: present

    - name: Create the EC2 instance
      ec2:
        aws_region: "{{ aws_region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        key_name: "{{ keypair_name }}"
        image: "{{ ami_id }}"
        instance_type: "{{ type }}"
        user_data: "{{ user_data }}"
        group: ansible-demo
        assign_public_ip: yes
        exact_count: "{{ count }}"
        instance_tags: "{{ tags }}"
        count_tag: "{{ tags }}"
        wait: yes
      async: 180
      poll: 0
      register: provisioning

    - name: Check on provisioning
      async_status:
        jid: "{{ provisioning.ansible_job_id }}"
      register: provisioning_job
      until: "{{ provisioning_job.finished }}"
      retries: 30

    - name: Wait for provisioned instance
      wait_for:
        port: "{{ wait_port }}"
        host: "{{ provisioning_job.tagged_instances[0].public_ip }}"
        delay: 10
      when: wait_port
