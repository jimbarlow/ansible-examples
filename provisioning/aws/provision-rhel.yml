- hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: find current RHEL AMI in this region
      ec2_ami_find:
        aws_region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        virtualization_type: hvm
        owner: amazon
        name: RHEL-7.4_HVM_GA-*
        no_result_action: fail
        sort: name
        sort_order: descending
      register: found_amis

    - set_fact:
        rhel_ami_id: "{{ (found_amis.results | first).ami_id  }}"

    - name: ensure the demo security group is configured correctly
      ec2_group:
        aws_region: "{{ aws_region }}"
        name: ansible-demo
        description: SSH and common web app ports for Ansible demos.
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5986
            to_port: 5986
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg_out

    - name: ensure instances are running
      ec2:
        aws_region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        image: "{{ rhel_ami_id }}"
        instance_type: t2.micro
        group_id: "{{ sg_out.group_id }}"
        wait: yes
        wait_timeout: 500
        exact_count: 1
        count_tag:
          Name: rhel-demo-{{ tower_user_name }}
          Group: rhel
        instance_tags:
          Name: rhel-demo-{{ tower_user_name }}
          Group: rhel
      register: ec2_result

    - name: wait for SSH to answer on all hosts
      wait_for:
        port: 22
        host: "{{ item.public_ip }}"
        timeout: 300
      with_items: "{{ ec2_result.tagged_instances }}"
